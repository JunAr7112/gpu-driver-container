# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
    - local: '.common-ci.yml'

default:
  tags:
    - cnt
    - container-dev
    - docker/multi-arch
    - docker/privileged
    - os/linux
    - type/docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Release "devel"-tagged images off the master branch
  # Disabling this for now
  RELEASE_DEVEL_BRANCH: "DISABLED"
  DEVEL_RELEASE_IMAGE_VERSION: "devel"
  # Define the public staging registry
  STAGING_REGISTRY: ghcr.io/nvidia
  STAGING_VERSION: "${CI_COMMIT_SHORT_SHA}"

.image-pull-rules:
  # We delay the job start to allow the public pipeline to generate the required images.
  rules:
    - when: delayed
      start_in: 30 minutes

.image-pull-generic:
  stage: image-build
  variables:
    IN_REGISTRY: "${STAGING_REGISTRY}"
    IN_IMAGE_NAME: driver
    IN_VERSION: "${STAGING_VERSION}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
  timeout: 30 minutes
  retry:
    max: 2
    when:
      - job_execution_timeout
      - stuck_or_timeout_failure
  before_script:
    - !reference [.regctl-setup, before_script]
    - 'if [[ "${PRECOMPILED}" != "true" ]]; then echo DRIVER_VERSION: ${DRIVER_VERSION} ; [[ -n "${DRIVER_VERSION}" ]] || exit 1; fi'
    - apk add --no-cache make bash
    #- regctl manifest get ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} --list > /dev/null && echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST}" || ( echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} does not exist" && sleep infinity )
  script:
    - regctl registry login "${OUT_REGISTRY}" -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}"
    - if [[ "${PRECOMPILED}" == "true" ]]; then IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} ./scripts/precompiled.sh push; else make IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} VERSION=${IN_VERSION} OUT_VERSION=${IN_VERSION} push-${DIST}-${DRIVER_VERSION}; fi

.image-pull:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]


.image-pull-ubuntu24.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu24.04
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

image-precompiled-ubuntu24.04:
  variables:
    DIST: signed_ubuntu24.04
    BASE_TARGET: noble
    PRECOMPILED: "true"
    CVE_UPDATES: "curl libc6"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: delayed
      start_in: 30 minutes
  extends:
    - .driver-versions-precompiled-ubuntu24.04
    - .image-pull-generic

.image-pull-ubuntu20.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu20.04
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

.image-pull-ubuntu22.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

image-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
    CVE_UPDATES: "curl libc6"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: delayed
      start_in: 30 minutes
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .image-pull-generic

image-ubuntu20.04:
  extends:
    - .image-pull-ubuntu20.04
    - .dist-ubuntu20.04

image-ubuntu22.04:
  extends:
    - .image-pull-ubuntu22.04
    - .dist-ubuntu22.04

image-ubuntu24.04:
  extends:
    - .image-pull-ubuntu24.04
    - .dist-ubuntu24.04

image-rhel8:
  extends:
    - .image-pull
    - .dist-rhel8

image-rhel9:
  extends:
    - .image-pull
    - .dist-rhel9

.release:ngc-variables:
  variables:
    OUT_REGISTRY_USER: "${NGC_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${NGC_REGISTRY_TOKEN}"
    OUT_REGISTRY: "${NGC_REGISTRY}"

# Define the external release helpers
.release:ngc:
  extends:
    - .release:external
    - .release:ngc-variables
  script:
    - |
      if [[ -n "${OUT_VERSION}" ]]; then
        echo "${CI_COMMIT_SHORT_SHA}-${DRIVER_VERSION}-${DIST} ${OUT_VERSION}-${DRIVER_VERSION}-${OUT_DIST}" > build-info-${DRIVER_VERSION}-${OUT_DIST}.txt
      else
        echo "${CI_COMMIT_SHORT_SHA}-${DRIVER_VERSION}-${DIST} ${DRIVER_VERSION}-${OUT_DIST}" > build-info-${DRIVER_VERSION}-${OUT_DIST}.txt
      fi

release:ngc-ubuntu20.04:
  extends:
    - .release:ngc
    - .dist-ubuntu20.04
    - .driver-versions-ubuntu20.04

release:ngc-ubuntu22.04:
  extends:
    - .release:ngc
    - .dist-ubuntu22.04
    - .driver-versions

release:ngc-ubuntu24.04:
  extends:
    - .release:ngc
    - .dist-ubuntu24.04
    - .driver-versions-ubuntu24.04

release:ngc-precompiled-ubuntu24.04:
  variables:
    DIST: signed_ubuntu24.04
    BASE_TARGET: noble
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu24.04
    - .release-generic
    - .release:ngc-variables
  rules:
  - !reference [.precompiled-rules, rules]

release:ngc-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .release-generic
    - .release:ngc-variables
  rules:
    - !reference [.precompiled-rules, rules]

release:ngc-rhcos4.14:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.14"

release:ngc-rhcos4.15:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.15"

release:ngc-rhcos4.16:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.16"

release:ngc-rhcos4.17:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.17"

release:ngc-rhcos4.18:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.18"

release:ngc-rhel8.8:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.8"

release:ngc-rhel8.10:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.10"

release:ngc-rhel9.4:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.4"

release:ngc-rhel9.5:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.5"

release:ngc-rhel9.6:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.6"

# First job to process build information
process-build-info:
  stage: ngc-publish
  needs:
    - job: release:staging-ubuntu20.04
      optional: true
    - job: release:staging-ubuntu22.04
      optional: true
    - job: release:staging-ubuntu24.04
      optional: true
    - job: release:staging-rhel8
      optional: true
    - job: release:ngc-ubuntu20.04
      optional: true
    - job: release:ngc-ubuntu22.04
      optional: true
    - job: release:ngc-ubuntu24.04
      optional: true
    - job: release:ngc-rhel8.8
      optional: true
    - job: release:ngc-rhel8.10
      optional: true
    - job: release:ngc-rhcos4.12
      optional: true
    - job: release:ngc-rhcos4.13
      optional: true
    - job: release:ngc-rhcos4.14
      optional: true
    - job: release:ngc-rhcos4.15
      optional: true
    - job: release:ngc-rhcos4.16
      optional: true
    - job: release:ngc-rhcos4.17
      optional: true
    - job: release:ngc-rhcos4.18
      optional: true
  script:
    - |
      distributions="ubuntu20.04 ubuntu22.04 ubuntu24.04 rhel8 rhcos4.12 rhcos4.13 rhcos4.14 rhcos4.15 rhcos4.16 rhcos4.17 rhcos4.18 rhel8.8 rhel8.10"
      > combined-build-info.txt
      for dist in $distributions; do
        for driver_version in ${DRIVER_VERSIONS}; do
          if [ -f "build-info-${driver_version}-${dist}.txt" ]; then
            cat "build-info-${driver_version}-${dist}.txt" >> combined-build-info.txt
          fi
        done
      done

      # Verify we got some data
      if [ ! -s combined-build-info.txt ]; then
        echo "Error: No build information was collected"
        exit 1
      fi
  artifacts:
    paths:
      - combined-build-info.txt
  
# Second job to trigger downstream pipeline
raise-publishing-merge-request:
  stage: ngc-publish
  needs:
    - job: process-build-info
      artifacts: true
  image: 
    name: "${CNT_NGC_PUBLISH_IMAGE}"
    pull_policy: always
  variables:
    GITLAB_ACCESS_TOKEN: "${CNT_GITLAB_TOKEN}"
    NGC_PUBLISHING_PROJECT_PATH: "dl/container-dev/ngc-automation"
  script:
    - cnt-ngc-publish render --project-name "gpu-driver-container" --versions-file "combined-build-info.txt" --output gpu-driver-container.yaml
    - cnt-ngc-publish merge-request --files "gpu-driver-container.yaml